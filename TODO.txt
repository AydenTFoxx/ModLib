ModLib:
    Core.PatchLoader._latestPatcherVersion could be assigned at compile-time, somehow. Would help a lot with not forgetting to change it after an update.

    Add a method to add mod IDs to CompatibilityManager.SupportedModIDs;
        Done!
    Rewrite ModLib initialization to allow mods interacting with certain systems before Core is initialized.
        Done-ish. Only CompatibilityManager has that feature so far

    Potentially have an individual ServerOptions instance per registered mod?
    Meadow sync would only be performed for mods which are present on both ends; ModLib could send a SoftRPC first to request the host for their list of enabled ModLib mods.

    LogUtilsHelper should have as little ModLib-specific branches as possible; ModLib should be treated as a regular consumer of its own API

    Core, Extras, and LoggingAdapter possess a circular dependency, where one requests data from the other. This is a recipe for failure which is already yielding bad results.

    Core.LogSource should not be used outside of the Core class; For the time being, however, it is being used to resolve circular dependencies like the above.

    Loader.Patcher cannot find the CompatibilityMods.txt files, rendering the new CompatibilityManager feature unusable

AscendedSaint:
    Player sees their own name in the ascension/revival messages, instead of the actual ascended/revived target.

    Reviving an online creature causes both the owner and the caller to attempt running the revival method; The creature is not revived.

    Self-ascension is disabled in an online lobby, regardless of the client or host's settings (possibly due to above ServerOptions issue)
    Ascension effects are also not played; None of the aforementioned issues occur in singleplayer.
        A potential fix has been provided; Playtest is pending.
        Fix is not enough; Now the game freezes waiting for the creature's revival. Non-players don't work either.