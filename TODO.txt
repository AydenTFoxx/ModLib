ModLib:
    Core.PatchLoader._latestPatcherVersion could be assigned at compile-time, somehow. Would help a lot with not forgetting to change it after an update.

    Potentially have an individual ServerOptions instance per registered mod?
    Meadow sync would only be performed for mods which are present on both ends; ModLib could send a SoftRPC first to request the host for their list of enabled ModLib mods.

    LogUtilsHelper should have as little ModLib-specific branches as possible; ModLib should be treated as a regular consumer of its own API

    Core, Extras, and LoggingAdapter possess a circular dependency, where one requests data from the other. This is a recipe for failure which is already yielding bad results.
        Fixed!

    Core.LogSource should not be used outside of the Core class; For the time being, however, it is being used to resolve circular dependencies like the above.
        Fixed? Better than before.

---

ModLib README:
    (TODO: Make greater use of this shared API, simplifying interoperability between mods)

    (TODO: Revive old Logger.cs and adapt it to be a fallback logger instead of solely relying on BepInEx's)
        Done? More or less so; Trimmed a lot of irrelevant methods.

    (TODO: Return overrides values to their original values when a temporary option is removed)
        Done!
    (TODO? Add a duration for temporary options? Feels more like a user responsibility... Too specific to be made into a general-purpose tool)

    (TODO: Force a refresh of the local OptionUtils.SharedOptions instance when no longer online? Seems only useful in a few edge cases, but relevant nonetheless)
        Done!

    (TODO: Make both conversions implicit, so the two classes are as interchangeable as allowed by C#)
        Done!

    (TODO? Make Keybind methods also inherit this functionality, juust to be sure. If there are two ways to do something, someone will use the less effective one at some point.)


AscendedSaint:
    Player sees their own name in the ascension/revival messages, instead of the actual ascended/revived target.

    Reviving an online creature causes both the owner and the caller to attempt running the revival method; The creature is not revived.

    Self-ascension is disabled in an online lobby, regardless of the client or host's settings (possibly due to above ServerOptions issue)
    Ascension effects are also not played; None of the aforementioned issues occur in singleplayer.
        A potential fix has been provided; Playtest is pending.
        Fix is not enough; Now the game freezes waiting for the creature's revival. Non-players don't work either.