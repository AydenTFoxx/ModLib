{
  "api/ModLib.Collections.WeakCollection-1.html": {
    "href": "api/ModLib.Collections.WeakCollection-1.html",
    "title": "Class WeakCollection<T> | ModLib",
    "summary": "Class WeakCollection<T> Namespace ModLib.Collections Assembly ModLib.dll A collection of weakly-referenced elements of a given type. public class WeakCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : class Type Parameters T The type of this collection. Inheritance object WeakCollection<T> Implements ICollection<T> IEnumerable<T> IEnumerable Derived WeakList<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors WeakCollection() Creates a new collection of weak references to a given type. public WeakCollection() WeakCollection(IEnumerable<T>) Creates a new collection of weak references to a given type containing elements copied from the provided collection. public WeakCollection(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection whose values will be copied. WeakCollection(int) Creates a new collection of weak references to a given type with the provided initial capacity. public WeakCollection(int capacity) Parameters capacity int The number of elements the collection can initially store. Fields values The internal collection used for tracking WeakReference<T> objects. protected readonly List<WeakReference<T>> values Field Value List<WeakReference<T>> Properties Count Gets the number of weak references contained in the WeakReference<T>. public int Count { get; } Property Value int The number of weak references contained in the WeakReference<T>. IsReadOnly Gets a value indicating whether the WeakCollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the WeakCollection<T> is read-only; false otherwise. Methods Add(T) Adds a new weak reference to the WeakCollection<T>. public void Add(T item) Parameters item T The object to be referenced. Clear() Removes all items from the WeakCollection<T>. public void Clear() Contains(T) Determines whether the WeakCollection<T> contains a specific value. public bool Contains(T item) Parameters item T Returns bool true if item is found in the WeakCollection<T>; false otherwise. CopyTo(T[], int) Copies the elements of the WeakCollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from WeakCollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Remove(T) Removes the first occurrence of a specific object from the WeakCollection<T>. public bool Remove(T item) Parameters item T The object to remove from the WeakCollection<T>. Returns bool true if item was successfully removed from the WeakCollection<T>; otherwise, false. This method also returns false if item is not found in the original WeakCollection<T>."
  },
  "api/ModLib.Collections.WeakDictionary-2.html": {
    "href": "api/ModLib.Collections.WeakDictionary-2.html",
    "title": "Class WeakDictionary<TKey, TValue> | ModLib",
    "summary": "Class WeakDictionary<TKey, TValue> Namespace ModLib.Collections Assembly ModLib.dll A dictionary of weak references, akin to a ConditionalWeakTable<TKey, TValue>. When a key or value is disposed, its corresponding pair is automatically removed. public class WeakDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDisposable where TKey : class Type Parameters TKey The type for the keys of this dictionary; Must be a reference type. TValue The type for the values of this dictionary; Can be a reference or value type. Inheritance object WeakDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected void Dispose(bool bManual) Parameters bManual bool ~WeakDictionary() protected ~WeakDictionary() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/ModLib.Collections.WeakList-1.html": {
    "href": "api/ModLib.Collections.WeakList-1.html",
    "title": "Class WeakList<T> | ModLib",
    "summary": "Class WeakList<T> Namespace ModLib.Collections Assembly ModLib.dll A list of weakly-referenced values, which are removed when the underlying value is GC'ed. public class WeakList<T> : WeakCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : class Type Parameters T The type of the elements of this list. Inheritance object WeakCollection<T> WeakList<T> Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members WeakCollection<T>.values WeakCollection<T>.Add(T) WeakCollection<T>.Clear() WeakCollection<T>.Count WeakCollection<T>.IsReadOnly WeakCollection<T>.Contains(T) WeakCollection<T>.CopyTo(T[], int) WeakCollection<T>.Remove(T) WeakCollection<T>.GetEnumerator() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors WeakList() Creates a new collection of weak references to a given type. public WeakList() WeakList(IEnumerable<T>) Creates a new collection of weak references to a given type containing elements copied from the provided collection. public WeakList(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection whose values will be copied. WeakList(int) Creates a new collection of weak references to a given type with the provided initial capacity. public WeakList(int capacity) Parameters capacity int The number of elements the collection can initially store. Properties this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value T The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods IndexOf(T) Determines the index of a specific item in the IList<T>. public int IndexOf(T item) Parameters item T The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, T) Inserts an item to the IList<T> at the specified index. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/ModLib.Collections.html": {
    "href": "api/ModLib.Collections.html",
    "title": "Namespace ModLib.Collections | ModLib",
    "summary": "Namespace ModLib.Collections Classes WeakCollection<T> A collection of weakly-referenced elements of a given type. WeakDictionary<TKey, TValue> A dictionary of weak references, akin to a ConditionalWeakTable<TKey, TValue>. When a key or value is disposed, its corresponding pair is automatically removed. WeakList<T> A list of weakly-referenced values, which are removed when the underlying value is GC'ed."
  },
  "api/ModLib.CompatibilityManager.html": {
    "href": "api/ModLib.CompatibilityManager.html",
    "title": "Class CompatibilityManager | ModLib",
    "summary": "Class CompatibilityManager Namespace ModLib Assembly ModLib.dll Simple helper for determining the presence of other mods and ensure mod compatibility. public static class CompatibilityManager Inheritance object CompatibilityManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Clear() Clears the internal dictionary of cached mods. public static void Clear() IsIICEnabled() Determines if either Improved Input Config or Improved Input Config: Extended are enabled. public static bool IsIICEnabled() Returns bool true if one of these mods is enabled, false otherwise. IsModEnabled(string) Determines if a given mod is currently enabled. public static bool IsModEnabled(string modID) Parameters modID string The ID of the mod to check for. Returns bool true if the given mod was found to be enabled, false otherwise. IsRainMeadowEnabled() Determines if the Rain Meadow mod is enabled. public static bool IsRainMeadowEnabled() Returns bool true if the mod is enabled, false otherwise. SetModCompatibility(string, bool) Overrides the configured compatibility features for a given mod. public static void SetModCompatibility(string modID, bool enable) Parameters modID string The identifier of the mod. enable bool Whether or not compatibility with the given mod should be enabled."
  },
  "api/ModLib.Extras.html": {
    "href": "api/ModLib.Extras.html",
    "title": "Class Extras | ModLib",
    "summary": "Class Extras Namespace ModLib Assembly ModLib.dll A collection of utilities and wrappers for common modding activities. public static class Extras Inheritance object Extras Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties InGameSession If the player is currently in-game and not on the main menu. public static bool InGameSession { get; } Property Value bool IsHostPlayer If the player is the host of the current game session. On Singleplayer, this is always true. public static bool IsHostPlayer { get; } Property Value bool IsIICEnabled Whether or not the Improved Input Config: Extended mod is present. This value is cached for performance purposes. public static bool IsIICEnabled { get; } Property Value bool IsMeadowEnabled Whether or not the Rain Meadow mod is present. This value is cached for performance purposes. public static bool IsMeadowEnabled { get; } Property Value bool IsOnlineSession If the current game session is in an online lobby. public static bool IsOnlineSession { get; } Property Value bool LogUtilsAvailable Determines if LogUtils is currently loaded and available for usage. public static bool LogUtilsAvailable { get; } Property Value bool ModLibAvailable Determines if ModLib is currently loaded and available for usage. public static bool ModLibAvailable { get; } Property Value bool Methods WrapAction(Action, bool) Wraps a given action in a try-catch, safely performing its code while handling potential exceptions. public static Action? WrapAction(Action action, bool autoInvoke = true) Parameters action Action The action to be executed. autoInvoke bool If true, the resulting action is invoked immediately, and null is returned instead. Returns Action The wrapped Action object, or null if autoInvoke was set to true. WrapILHook(Action<ILContext>) Wraps a given IL hook in a try-catch, preventing it from breaking other code when applied. public static ILContext.Manipulator WrapILHook(Action<ILContext> action) Parameters action Action<ILContext> The hook method to be wrapped. Returns ILContext.Manipulator An ILContext.Manipulator instance to be passed in place of the method itself. Remarks Usage of this method is akin to the original WrapInit method; See SlugTemplate for an example of this."
  },
  "api/ModLib.Input.CustomInputData.html": {
    "href": "api/ModLib.Input.CustomInputData.html",
    "title": "Class CustomInputData | ModLib",
    "summary": "Class CustomInputData Namespace ModLib.Input Assembly ModLib.dll Provides simple representation of a given player's input data; A mirror of ImprovedInput.Plugin.PlayerData which can be converted to and from its original class. public class CustomInputData Inheritance object CustomInputData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods CustomInputDataExts.Input(CustomInputData) CustomInputDataExts.InputHistory(CustomInputData) CustomInputDataExts.IsKeyBound(CustomInputData, PlayerKeybind) CustomInputDataExts.IsKeyUnbound(CustomInputData, PlayerKeybind) CustomInputDataExts.IsPressed(CustomInputData, PlayerKeybind) CustomInputDataExts.JustPressed(CustomInputData, PlayerKeybind) CustomInputDataExts.RawInput(CustomInputData) CustomInputDataExts.RawInputHistory(CustomInputData) Constructors CustomInputData() Creates a new CustomInputData with empty values, bound to the default player index. public CustomInputData() CustomInputData(PlayerData, int) Creates a new CustomInputData from the given ImprovedInput.Plugin.PlayerData instance, then binds it to the provided player index. public CustomInputData(Plugin.PlayerData data, int playerNumber = 0) Parameters data Plugin.PlayerData The data whose values will be copied from. playerNumber int The player index this data should be bound to. CustomInputData(int) Creates a new CustomInputData with empty values, bound to the provided player index. public CustomInputData(int playerNumber) Parameters playerNumber int The player index this data will be bound to. Fields input The current input buffer of the bound player, accounting for factors such as stun, death, or cutscenes. public readonly CustomInput[] input Field Value CustomInput[] playerNumber The player index this data is bound to. public int playerNumber Field Value int rawInput The raw input of the bound player, retrieved directly from the game. public readonly CustomInput[] rawInput Field Value CustomInput[] Methods CopyFrom(CustomInput[], CustomInput[]) Copies the input data from the provided input arrays. public void CopyFrom(CustomInput[] input, CustomInput[] rawInput) Parameters input CustomInput[] The input to be copied from. rawInput CustomInput[] The raw input to be copied from. CopyFrom(PlayerData) Copies the input data from the provided PlayerData to this instance. public void CopyFrom(Plugin.PlayerData data) Parameters data Plugin.PlayerData The data whose values will be copied from. CopyTo(CustomInput[], CustomInput[]) Copies this instance's input data to the provided input arrays. public void CopyTo(CustomInput[] input, CustomInput[] rawInput) Parameters input CustomInput[] The input array to be copied to. rawInput CustomInput[] The raw input array to be copied to. CopyTo(PlayerData) Copies this instance's input data to the provided PlayerData instance. public void CopyTo(Plugin.PlayerData data) Parameters data Plugin.PlayerData The data whose values will be copied to. Operators implicit operator CustomInputData(PlayerData) Converts a ImprovedInput.Plugin.PlayerData instance to an equivalent CustomInputData instance. public static implicit operator CustomInputData(Plugin.PlayerData self) Parameters self Plugin.PlayerData The data itself. Returns CustomInputData implicit operator PlayerData(CustomInputData) Converts this data instance to an equivalent ImprovedInput.Plugin.PlayerData instance. public static implicit operator Plugin.PlayerData(CustomInputData self) Parameters self CustomInputData The data itself. Returns Plugin.PlayerData"
  },
  "api/ModLib.Input.CustomInputDataExts.html": {
    "href": "api/ModLib.Input.CustomInputDataExts.html",
    "title": "Class CustomInputDataExts | ModLib",
    "summary": "Class CustomInputDataExts Namespace ModLib.Input Assembly ModLib.dll Extension methods for evaluating the input data of non-player objects. public static class CustomInputDataExts Inheritance object CustomInputDataExts Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Input(CustomInputData) public static CustomInput Input(this CustomInputData self) Parameters self CustomInputData Returns CustomInput InputHistory(CustomInputData) public static CustomInput[] InputHistory(this CustomInputData self) Parameters self CustomInputData Returns CustomInput[] IsKeyBound(CustomInputData, PlayerKeybind) public static bool IsKeyBound(this CustomInputData self, PlayerKeybind key) Parameters self CustomInputData key PlayerKeybind Returns bool IsKeyUnbound(CustomInputData, PlayerKeybind) public static bool IsKeyUnbound(this CustomInputData self, PlayerKeybind key) Parameters self CustomInputData key PlayerKeybind Returns bool IsPressed(CustomInputData, PlayerKeybind) public static bool IsPressed(this CustomInputData self, PlayerKeybind key) Parameters self CustomInputData key PlayerKeybind Returns bool JustPressed(CustomInputData, PlayerKeybind) public static bool JustPressed(this CustomInputData self, PlayerKeybind key) Parameters self CustomInputData key PlayerKeybind Returns bool RawInput(CustomInputData) public static CustomInput RawInput(this CustomInputData self) Parameters self CustomInputData Returns CustomInput RawInputHistory(CustomInputData) public static CustomInput[] RawInputHistory(this CustomInputData self) Parameters self CustomInputData Returns CustomInput[]"
  },
  "api/ModLib.Input.InputHandler.html": {
    "href": "api/ModLib.Input.InputHandler.html",
    "title": "Class InputHandler | ModLib",
    "summary": "Class InputHandler Namespace ModLib.Input Assembly ModLib.dll General interface for managing keybinds and retrieving player input. public static class InputHandler Inheritance object InputHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetRawInput(Player) Retrieves the raw input package for the given player. public static Player.InputPackage GetRawInput(this Player self) Parameters self Player The player whose input will be queried. Returns Player.InputPackage A Player.InputPackage containing the input for the given player. GetRawInput(int) Retrieves the raw input package for the given player index. public static Player.InputPackage GetRawInput(int playerNumber) Parameters playerNumber int The player index whose input will be queried. Returns Player.InputPackage A Player.InputPackage containing the input for the given player index. IsKeyDown(Player, Keybind) Determines whether a given keybind is currently being held by the player. public static bool IsKeyDown(this Player player, Keybind keybind) Parameters player Player The player itself. keybind Keybind The keybind to be checked. Returns bool true if the keybind's key is currently being held, false otherwise. IsKeyDown(int, Keybind) Determines whether a given keybind is currently being held by the player with the provided index. public static bool IsKeyDown(int playerNumber, Keybind keybind) Parameters playerNumber int The index of the player. keybind Keybind The keybind to be checked. Returns bool true if the keybind's key is currently being held, false otherwise. ToggleInputListener(int) Enables or disables input handling for non-player objects. If enabled, a CustomInputData can be retrieved from the player's index to obtain their current input. public static void ToggleInputListener(int playerNumber) Parameters playerNumber int The player index to be checked. Remarks This requires the Improved Input Config: Extended mod to work, and will do nothing otherwise. WasKeyJustPressed(Player, Keybind) Determines whether a given keybind has just been pressed by the player. public static bool WasKeyJustPressed(this Player player, Keybind keybind) Parameters player Player The player itself. keybind Keybind The keybind to be checked. Returns bool true if the keybind's key was just pressed, false otherwise. WasKeyJustPressed(int, Keybind) Determines whether a given keybind has just been pressed by the player with the provided index. public static bool WasKeyJustPressed(int playerNumber, Keybind keybind) Parameters playerNumber int The index of the player. keybind Keybind The keybind to be checked. Returns bool true if the keybind's key was just pressed, false otherwise."
  },
  "api/ModLib.Input.Keybind.html": {
    "href": "api/ModLib.Input.Keybind.html",
    "title": "Class Keybind | ModLib",
    "summary": "Class Keybind Namespace ModLib.Input Assembly ModLib.dll An immutable representation of a player keybind, compatible with ImprovedInput's PlayerKeybind object. public record Keybind : IEquatable<Keybind> Inheritance object Keybind Implements IEquatable<Keybind> Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties GamepadPreset The KeyCode to be used for detecting inputs with a gamepad. public KeyCode GamepadPreset { get; } Property Value KeyCode Id The unique identifier of this Keybind. public string Id { get; } Property Value string KeyboardPreset The KeyCode to be used for detecting inputs with a keyboard. public KeyCode KeyboardPreset { get; } Property Value KeyCode Mod The name of the mod this Keybind belongs to. public string Mod { get; } Property Value string Name The user-friendly name of this Keybind. public string Name { get; } Property Value string XboxPreset The KeyCode to be used for detecting inputs with an xbox. public KeyCode XboxPreset { get; } Property Value KeyCode Methods Get(string) Retrieves the Keybind with the given identifier. public static Keybind? Get(string id) Parameters id string The identifier of the Keybind to be retrieved. Returns Keybind The Keybind object whose Id matches the provided argument, or null if none is found. Keybinds() Returns a read-only list of all registered keybinds. public static IReadOnlyList<Keybind> Keybinds() Returns IReadOnlyList<Keybind> A read-only list of all registered keybinds. Register(string?, string, KeyCode, KeyCode) Registers a new Keybind with the provided arguments. public static Keybind Register(string? id, string name, KeyCode keyboardPreset, KeyCode gamepadPreset) Parameters id string The identifier of this keybind. Must be an unique string not used by any other mod, or yourself. If omitted, an unique identifier is generated with the format \"{ModId}.{KeybindName}\" name string The name of the new Keybind. Will be displayed for players with IIC:E enabled. keyboardPreset KeyCode The key code for usage by keyboard devices. gamepadPreset KeyCode The key code for usage by gamepad input devices. Returns Keybind The registered Keybind object. Remarks If the Improved Input: Extended mod is present, an equivalent PlayerKeybind is also registered to the game. Register(string?, string, KeyCode, KeyCode, KeyCode) Registers a new Keybind with the provided arguments. public static Keybind Register(string? id, string name, KeyCode keyboardPreset, KeyCode gamepadPreset, KeyCode xboxPreset) Parameters id string The identifier of this keybind. Must be an unique string not used by any other mod, or yourself. If omitted, an unique identifier is generated with the format \"{ModId}.{KeybindName}\" name string The name of the new Keybind. Will be displayed for players with IIC:E enabled. keyboardPreset KeyCode The key code for usage by keyboard devices. gamepadPreset KeyCode The key code for usage by gamepad input devices. xboxPreset KeyCode The key code for usage by Xbox input devices. Returns Keybind The registered Keybind object. Remarks If the Improved Input: Extended mod is present, an equivalent PlayerKeybind is also registered to the game. Register(string, KeyCode, KeyCode) Registers a new Keybind with the provided arguments. public static Keybind Register(string name, KeyCode keyboardPreset, KeyCode gamepadPreset) Parameters name string The name of the new Keybind. Will be displayed for players with IIC:E enabled. keyboardPreset KeyCode The key code for usage by keyboard devices. gamepadPreset KeyCode The key code for usage by gamepad input devices. Returns Keybind The registered Keybind object. Remarks If the Improved Input: Extended mod is present, an equivalent PlayerKeybind is also registered to the game. Register(string, KeyCode, KeyCode, KeyCode) Registers a new Keybind with the provided arguments. public static Keybind Register(string name, KeyCode keyboardPreset, KeyCode gamepadPreset, KeyCode xboxPreset) Parameters name string The name of the new Keybind. Will be displayed for players with IIC:E enabled. keyboardPreset KeyCode The key code for usage by keyboard devices. gamepadPreset KeyCode The key code for usage by gamepad input devices. xboxPreset KeyCode The key code for usage by Xbox input devices. Returns Keybind The registered Keybind object. Remarks If the Improved Input: Extended mod is present, an equivalent PlayerKeybind is also registered to the game. ToString() Returns a string that represents the Keybind object. public override string ToString() Returns string A string that represents the Keybind object. Operators implicit operator Keybind(PlayerKeybind) Retrieves the equivalent Keybind object of a PlayerKeybind instance. If none is found, a new Keybind is registered using the PlayerKeybind's values as arguments. public static implicit operator Keybind(PlayerKeybind self) Parameters self PlayerKeybind The PlayerKeybind object to be converted. Returns Keybind implicit operator PlayerKeybind(Keybind) Retrieves the equivalent PlayerKeybind object registered with the Keybind instance. If none is found, a new PlayerKeybind is registered using the Keybind's values as arguments. public static implicit operator PlayerKeybind(Keybind self) Parameters self Keybind The Keybind object to be converted. Returns PlayerKeybind"
  },
  "api/ModLib.Input.html": {
    "href": "api/ModLib.Input.html",
    "title": "Namespace ModLib.Input | ModLib",
    "summary": "Namespace ModLib.Input Classes CustomInputData Provides simple representation of a given player's input data; A mirror of ImprovedInput.Plugin.PlayerData which can be converted to and from its original class. CustomInputDataExts Extension methods for evaluating the input data of non-player objects. InputHandler General interface for managing keybinds and retrieving player input. Keybind An immutable representation of a player keybind, compatible with ImprovedInput's PlayerKeybind object."
  },
  "api/ModLib.Logging.FallbackLogger.html": {
    "href": "api/ModLib.Logging.FallbackLogger.html",
    "title": "Class FallbackLogger | ModLib",
    "summary": "Class FallbackLogger Namespace ModLib.Logging Assembly ModLib.dll Default wrapper for a BepInEx.Logging.ManualLogSource; Used when LogUtils is not avaliable at runtime. public class FallbackLogger : IMyLogger Inheritance object FallbackLogger Implements IMyLogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FallbackLogger(ManualLogSource) Default wrapper for a BepInEx.Logging.ManualLogSource; Used when LogUtils is not avaliable at runtime. public FallbackLogger(ManualLogSource logSource) Parameters logSource ManualLogSource Methods GetLogSource() Retrieves the internal log source of this logger implementation. public object GetLogSource() Returns object The log source of this logger implementation. Log(LogLevel, object) Logs a message with the specified log level. public void Log(LogLevel category, object message) Parameters category LogLevel message object Log(object) Logs a message with the default logging level. public void Log(object message) Parameters message object Message to log. LogDebug(object) Logs a message with BepInEx.Logging.LogLevel.Debug level. public void LogDebug(object data) Parameters data object Data to log. LogError(object) Logs a message with BepInEx.Logging.LogLevel.Error level. public void LogError(object data) Parameters data object Data to log. LogFatal(object) Logs a message with BepInEx.Logging.LogLevel.Fatal level. public void LogFatal(object data) Parameters data object Data to log. LogInfo(object) Logs a message with BepInEx.Logging.LogLevel.Info level. public void LogInfo(object data) Parameters data object Data to log. LogMessage(object) Logs a message with BepInEx.Logging.LogLevel.Message level. public void LogMessage(object data) Parameters data object Data to log. LogWarning(object) Logs a message with BepInEx.Logging.LogLevel.Warning level. public void LogWarning(object data) Parameters data object Data to log."
  },
  "api/ModLib.Logging.IMyLogger.html": {
    "href": "api/ModLib.Logging.IMyLogger.html",
    "title": "Interface IMyLogger | ModLib",
    "summary": "Interface IMyLogger Namespace ModLib.Logging Assembly ModLib.dll Base interface providing the same methods of a BepInEx.Logging.ManualLogSource object. public interface IMyLogger Remarks Implementation of this interface will depend on whether LogUtils is present at runtime. Methods GetLogSource() Retrieves the internal log source of this logger implementation. object GetLogSource() Returns object The log source of this logger implementation. Log(LogLevel, object) Logs a message with the specified log level. void Log(LogLevel level, object data) Parameters level LogLevel Log levels to attach to the message. Multiple can be used with bitwise ORing. data object Data to log. Log(object) Logs a message with the default logging level. void Log(object message) Parameters message object Message to log. LogDebug(object) Logs a message with BepInEx.Logging.LogLevel.Debug level. void LogDebug(object data) Parameters data object Data to log. LogError(object) Logs a message with BepInEx.Logging.LogLevel.Error level. void LogError(object data) Parameters data object Data to log. LogFatal(object) Logs a message with BepInEx.Logging.LogLevel.Fatal level. void LogFatal(object data) Parameters data object Data to log. LogInfo(object) Logs a message with BepInEx.Logging.LogLevel.Info level. void LogInfo(object data) Parameters data object Data to log. LogMessage(object) Logs a message with BepInEx.Logging.LogLevel.Message level. void LogMessage(object data) Parameters data object Data to log. LogWarning(object) Logs a message with BepInEx.Logging.LogLevel.Warning level. void LogWarning(object data) Parameters data object Data to log."
  },
  "api/ModLib.Logging.LogUtilsAdapter.html": {
    "href": "api/ModLib.Logging.LogUtilsAdapter.html",
    "title": "Class LogUtilsAdapter | ModLib",
    "summary": "Class LogUtilsAdapter Namespace ModLib.Logging Assembly ModLib.dll Wrapper class for a LogUtils logger instance. public class LogUtilsAdapter : IMyLogger Inheritance object LogUtilsAdapter Implements IMyLogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LogUtilsAdapter(ILogger) Wrapper class for a LogUtils logger instance. public LogUtilsAdapter(ILogger logger) Parameters logger ILogger Methods GetLogSource() Retrieves the internal log source of this logger implementation. public object GetLogSource() Returns object The log source of this logger implementation. Log(LogLevel, object) Logs a message with the specified log level. public void Log(LogLevel category, object message) Parameters category LogLevel message object Log(object) Logs a message with the default logging level. public void Log(object message) Parameters message object Message to log. LogDebug(object) Logs a message with BepInEx.Logging.LogLevel.Debug level. public void LogDebug(object data) Parameters data object Data to log. LogError(object) Logs a message with BepInEx.Logging.LogLevel.Error level. public void LogError(object data) Parameters data object Data to log. LogFatal(object) Logs a message with BepInEx.Logging.LogLevel.Fatal level. public void LogFatal(object data) Parameters data object Data to log. LogInfo(object) Logs a message with BepInEx.Logging.LogLevel.Info level. public void LogInfo(object data) Parameters data object Data to log. LogMessage(object) Logs a message with BepInEx.Logging.LogLevel.Message level. public void LogMessage(object data) Parameters data object Data to log. LogWarning(object) Logs a message with BepInEx.Logging.LogLevel.Warning level. public void LogWarning(object data) Parameters data object Data to log."
  },
  "api/ModLib.Logging.LoggingAdapter.html": {
    "href": "api/ModLib.Logging.LoggingAdapter.html",
    "title": "Class LoggingAdapter | ModLib",
    "summary": "Class LoggingAdapter Namespace ModLib.Logging Assembly ModLib.dll Intermediary helper for creating loggers with the appropriate logging backend. public static class LoggingAdapter Inheritance object LoggingAdapter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateLogger(ManualLogSource) Creates a logger instance employing a safe encapsulation technique. public static IMyLogger CreateLogger(ManualLogSource logSource) Parameters logSource ManualLogSource Returns IMyLogger"
  },
  "api/ModLib.Logging.html": {
    "href": "api/ModLib.Logging.html",
    "title": "Namespace ModLib.Logging | ModLib",
    "summary": "Namespace ModLib.Logging Classes FallbackLogger Default wrapper for a BepInEx.Logging.ManualLogSource; Used when LogUtils is not avaliable at runtime. LogUtilsAdapter Wrapper class for a LogUtils logger instance. LoggingAdapter Intermediary helper for creating loggers with the appropriate logging backend. Interfaces IMyLogger Base interface providing the same methods of a BepInEx.Logging.ManualLogSource object."
  },
  "api/ModLib.Meadow.MeadowGameModes.html": {
    "href": "api/ModLib.Meadow.MeadowGameModes.html",
    "title": "Enum MeadowGameModes | ModLib",
    "summary": "Enum MeadowGameModes Namespace ModLib.Meadow Assembly ModLib.dll Wrapper enum for representing potential RainMeadow.OnlineGameMode types. public enum MeadowGameModes Fields Arena = 2 The current online lobby's game mode is of type RainMeadow.ArenaOnlineGameMode. Custom = -1 The current online lobby's game mode is of an unknown type (possibly another mod's custom game mode). Meadow = 0 The current online lobby's game mode is of type RainMeadow.MeadowGameMode. Story = 1 The current online lobby's game mode is of type RainMeadow.StoryGameMode."
  },
  "api/ModLib.Meadow.MeadowUtils.html": {
    "href": "api/ModLib.Meadow.MeadowUtils.html",
    "title": "Class MeadowUtils | ModLib",
    "summary": "Class MeadowUtils Namespace ModLib.Meadow Assembly ModLib.dll Utilities for retrieving and evaluating data exclusive to the Rain Meadow mod. public static class MeadowUtils Inheritance object MeadowUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Warning: Always ensure Rain Meadow is enabled before using this class! Properties and methods like IsMeadowEnabled, IsOnlineSession, and IsRainMeadowEnabled() can all be used/queried before accessing any of this class's members. Otherwise, a TypeLoadException will be thrown, even if the given member does not have any Meadow-specific code. Properties IsHost Determines if this player is the host of an online session. On singleplayer, this is always true. public static bool IsHost { get; } Property Value bool IsOnline Determines if the current game session is an online lobby. public static bool IsOnline { get; } Property Value bool Methods GetOnlineName(Player) Obtains the online name of the given player. public static string? GetOnlineName(this Player self) Parameters self Player The player to be queried. Returns string A String containing the player's name, or null if none is found. IsGameMode(MeadowGameModes) Determines if the current online game session is of the given game mode type. If not online, this is always false. public static bool IsGameMode(MeadowGameModes gameMode) Parameters gameMode MeadowGameModes The gamemode to be tested for. Returns bool true if the current game session is both online and of the given game mode type; false otherwise. IsMine(PhysicalObject) Determines if the given physical object belongs to the client. public static bool IsMine(PhysicalObject physicalObject) Parameters physicalObject PhysicalObject The object itself. Returns bool true if the physical object belongs to this client (or the current game session is not online), false otherwise. Remarks If the current game session is not online, this always returns true. LogSystemMessage(string) Logs a message to Rain Meadow's chat (as the system) for all online players. public static void LogSystemMessage(string message) Parameters message string The contents of the message to be sent. RequestOwnership(PhysicalObject) Requests the owner of a given realized object for its ownership. public static void RequestOwnership(PhysicalObject physicalObject) Parameters physicalObject PhysicalObject The realized object whose ownership will be requested. Remarks Use this overload when running code in an environment where Rain Meadow may or may not be enabled. RequestOwnership(PhysicalObject, Action<GenericResult>) Requests the owner of a given realized object for its ownership, then runs a given callback method after resolving the request. public static void RequestOwnership(PhysicalObject physicalObject, Action<GenericResult> callback) Parameters physicalObject PhysicalObject The realized object whose ownership will be requested. callback Action<GenericResult> The callback method to be executed after resolving the request. RequestOwnership(OnlinePhysicalObject, Action<GenericResult>?) Requests the owner of a given online object for its ownership, then optionally runs a callback method after resolving the request. public static void RequestOwnership(OnlinePhysicalObject onlineObject, Action<GenericResult>? callback = null) Parameters onlineObject OnlinePhysicalObject The online object whose ownership will be requested. callback Action<GenericResult> The optional callback method to be executed after resolving the request."
  },
  "api/ModLib.Meadow.ModRPCManager.html": {
    "href": "api/ModLib.Meadow.ModRPCManager.html",
    "title": "Class ModRPCManager | ModLib",
    "summary": "Class ModRPCManager Namespace ModLib.Meadow Assembly ModLib.dll A simple tracker of sent RPC events, used to prevent unresolved SoftRPCs from hanging around indefinitely. public static class ModRPCManager Inheritance object ModRPCManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods BroadcastOnceRPCInRoom(OnlineEntity, Delegate, params object[]) Sends a single RPC event to all players in the same room as the online entity. public static void BroadcastOnceRPCInRoom(this OnlineEntity source, Delegate del, params object[] args) Parameters source OnlineEntity The online entity who will send the RPC events. del Delegate The RPC method to be sent. args object[] Any arguments of the RPC method. ResolveRPCEvent(GenericResult) Logs the result of the resolved RPC event, then removes its timeout irrespective of its result. public static void ResolveRPCEvent(GenericResult result) Parameters result GenericResult The result of the resolved RPC event. SendRPCEvent<T>(OnlinePlayer, T, params object[]) Sends an RPC event to the online player, which is automatically aborted if the recipient does not answer after a certain time limit. public static RPCEvent SendRPCEvent<T>(this OnlinePlayer onlinePlayer, T @delegate, params object[] args) where T : Delegate Parameters onlinePlayer OnlinePlayer The recipient who will receive this RPC event. delegate T The RPC method to be sent. args object[] Any arguments of the RPC method. Returns RPCEvent The RainMeadow.RPCEvent instance sent to the online player. Type Parameters T The type of the RPC delegate to be sent."
  },
  "api/ModLib.Meadow.ModRPCs.SerializableOptions.html": {
    "href": "api/ModLib.Meadow.ModRPCs.SerializableOptions.html",
    "title": "Class ModRPCs.SerializableOptions | ModLib",
    "summary": "Class ModRPCs.SerializableOptions Namespace ModLib.Meadow Assembly ModLib.dll A serializable wrapper around a ServerOptions' local options dictionary. public class ModRPCs.SerializableOptions : Serializer.ICustomSerializable Inheritance object ModRPCs.SerializableOptions Implements Serializer.ICustomSerializable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SerializableOptions() Creates a new ModRPCs.SerializableOptions instance with an empty options dictionary for serialization. public SerializableOptions() SerializableOptions(IDictionary<string, ConfigValue>) Creates a new ModRPCs.SerializableOptions instance with the provided options for serialization. public SerializableOptions(IDictionary<string, ConfigValue> options) Parameters options IDictionary<string, ConfigValue> The options dictionary for serialization. Remarks Options prefixed with an underscore (_) are ignored for serialization purposes. Fields Options The internally held option values; public Dictionary<string, ConfigValue> Options Field Value Dictionary<string, ConfigValue> Methods CustomSerialize(Serializer) Serializes or de-serializes the referenced local options, using the provided serializer object. public void CustomSerialize(Serializer serializer) Parameters serializer Serializer The serializer for usage by this method."
  },
  "api/ModLib.Meadow.ModRPCs.html": {
    "href": "api/ModLib.Meadow.ModRPCs.html",
    "title": "Class ModRPCs | ModLib",
    "summary": "Class ModRPCs Namespace ModLib.Meadow Assembly ModLib.dll Events sent to and received by clients, used for syncing data in an online context. public static class ModRPCs Inheritance object ModRPCs Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LogSystemMessage(string) Writes the provided system message to the player's chat. [SoftRPCMethod] public static void LogSystemMessage(string message) Parameters message string The message to be displayed RequestSyncRemixOptions(RPCEvent, OnlinePlayer) Requests the owner of the current lobby to sync their REMIX options with this client. [SoftRPCMethod] public static void RequestSyncRemixOptions(RPCEvent rpcEvent, OnlinePlayer onlinePlayer) Parameters rpcEvent RPCEvent The RPC event itself. onlinePlayer OnlinePlayer The player who called this event. SyncRemixOptions(RPCEvent, SerializableOptions) Overrides the player's local SharedOptions instance with the host's own REMIX options. [SoftRPCMethod] public static void SyncRemixOptions(RPCEvent rpcEvent, ModRPCs.SerializableOptions options) Parameters rpcEvent RPCEvent The RPC event itself. options ModRPCs.SerializableOptions The serializable values of the host's ServerOptions instance."
  },
  "api/ModLib.Meadow.html": {
    "href": "api/ModLib.Meadow.html",
    "title": "Namespace ModLib.Meadow | ModLib",
    "summary": "Namespace ModLib.Meadow Classes MeadowUtils Utilities for retrieving and evaluating data exclusive to the Rain Meadow mod. ModRPCManager A simple tracker of sent RPC events, used to prevent unresolved SoftRPCs from hanging around indefinitely. ModRPCs Events sent to and received by clients, used for syncing data in an online context. ModRPCs.SerializableOptions A serializable wrapper around a ServerOptions' local options dictionary. Enums MeadowGameModes Wrapper enum for representing potential RainMeadow.OnlineGameMode types."
  },
  "api/ModLib.ModPlugin.html": {
    "href": "api/ModLib.ModPlugin.html",
    "title": "Class ModPlugin | ModLib",
    "summary": "Class ModPlugin Namespace ModLib Assembly ModLib.dll A BaseUnityPlugin skeleton for quick prototyping and development. public abstract class ModPlugin : BaseUnityPlugin Inheritance object Object Component Behaviour MonoBehaviour BaseUnityPlugin ModPlugin Inherited Members BaseUnityPlugin.Info BaseUnityPlugin.Config MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks Notice: All visible methods are virtual, and may be overriden to load your mod's assets and hooks into the game. Constructors ModPlugin() Creates a new ModPlugin instance with no REMIX option interface. public ModPlugin() ModPlugin(OptionInterface?) Creates a new ModPlugin instance with the provided REMIX option interface. public ModPlugin(OptionInterface? options) Parameters options OptionInterface The mod's REMIX option interface class, if any. ModPlugin(OptionInterface?, IMyLogger?) Creates a new ModPlugin instance with the provided REMIX option interface and logger instance. public ModPlugin(OptionInterface? options, IMyLogger? logger) Parameters options OptionInterface The mod's REMIX option interface class, if any. logger IMyLogger The logger instance to be used. If null, a new one is created and assigned to this mod. Properties IsModEnabled Determines if this mod has successfuly been enabled. protected bool IsModEnabled { get; set; } Property Value bool Logger The custom logger instance for this mod. protected IMyLogger Logger { get; set; } Property Value IMyLogger Methods ApplyHooks() Applies this mod's hooks to the game. protected virtual void ApplyHooks() LoadResources() Load any resources, such as sprites or sounds. This also registers the mod's REMIX interface to the game. protected virtual void LoadResources() OnDisable() Removes hooks from the game, then marks the mod as disabled. Override this to run behavior which should occur when your mod is disabled/reloaded by the game. public virtual void OnDisable() Remarks This is most useful for Rain Reloader compatibility, but also seems to be called by the base game on exit. OnEnable() Applies hooks to the game, then marks the mod as enabled. Override this to add behavior which should only occur once, while your mod is being loaded by the game. public virtual void OnEnable() OnModsInitHook(orig_OnModsInit, RainWorld) Loads this mod's resources to the game. Override this to add any extra behavior which must be run once all mods have been loaded into the game. protected virtual void OnModsInitHook(RainWorld.orig_OnModsInit orig, RainWorld self) Parameters orig RainWorld.orig_OnModsInit self RainWorld RemoveHooks() Removes this mod's hooks from the game. protected virtual void RemoveHooks()"
  },
  "api/ModLib.Options.ClientOptionAttribute.html": {
    "href": "api/ModLib.Options.ClientOptionAttribute.html",
    "title": "Class ClientOptionAttribute | ModLib",
    "summary": "Class ClientOptionAttribute Namespace ModLib.Options Assembly ModLib.dll Determines a given REMIX option is not to be synced in an online context (e.g. a Rain Meadow lobby). [AttributeUsage(AttributeTargets.Field)] public sealed class ClientOptionAttribute : Attribute, _Attribute Inheritance object Attribute ClientOptionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType()"
  },
  "api/ModLib.Options.ConfigValue.ValueKind.html": {
    "href": "api/ModLib.Options.ConfigValue.ValueKind.html",
    "title": "Enum ConfigValue.ValueKind | ModLib",
    "summary": "Enum ConfigValue.ValueKind Namespace ModLib.Options Assembly ModLib.dll The kind of the internally held value from the configurable struct. public enum ConfigValue.ValueKind : byte Fields Bool = 2 The internally held value is of type bool. Float = 1 The internally held value is of type float. Int = 0 The internally held value is of type int. String = 3 The internally held value is of type string."
  },
  "api/ModLib.Options.ConfigValue.html": {
    "href": "api/ModLib.Options.ConfigValue.html",
    "title": "Struct ConfigValue | ModLib",
    "summary": "Struct ConfigValue Namespace ModLib.Options Assembly ModLib.dll A holder of supported values for Configurable<T> options. public readonly struct ConfigValue : IComparable, IComparable<ConfigValue>, IEquatable<ConfigValue> Implements IComparable IComparable<ConfigValue> IEquatable<ConfigValue> Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors ConfigValue(string) Creates a new configurable value holding the provided string object. public ConfigValue(string value) Parameters value string The string to be stored. ConfigValue(ValueType?) Creates a new configurable value holding the provided value type. public ConfigValue(ValueType? value) Parameters value ValueType The value type to be stored. Must be an integer, float, or boolean. Exceptions NotSupportedException The provided value type is not one of the above supported types. Properties Kind Determines the internally held type of this object. public ConfigValue.ValueKind Kind { get; } Property Value ConfigValue.ValueKind Methods CompareTo(ConfigValue) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ConfigValue other) Parameters other ConfigValue An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object obj) Parameters obj object An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. Equals(ConfigValue) Indicates whether the current object is equal to another object of the same type. public bool Equals(ConfigValue other) Parameters other ConfigValue An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromObject(object?) Creates a new configurable value holding the provided object. public static ConfigValue FromObject(object? value) Parameters value object The object to be stored. Must be either an integer, float, boolean or string. Returns ConfigValue The newly created ConfigValue instance. GetBoxedValue() Retrieves a boxed representation of the internal value stored by this ConfigValue instance. public object? GetBoxedValue() Returns object The boxed internally held value of this instance, or null if none is found. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsNumeric() Determines if the internally held value is of a numeric type. public bool IsNumeric() Returns bool true if the internally held value is of a numeric type, false otherwise. ToString() Returns the string representation of the internally held value by this instance. public override string ToString() Returns string The string representation of the internally held value by this instance. TryGetBool(out bool) Attempts to retrieve a stored boolean from the configurable object, if there is any. public bool TryGetBool(out bool v) Parameters v bool The retrieved value, or false if none is found. Returns bool true if the internally held value is of type bool, false otherwise. TryGetFloat(out float) Attempts to retrieve a stored float from the configurable object, if there is any. public bool TryGetFloat(out float v) Parameters v float The retrieved value, or 0.0F if none is found. Returns bool true if the internally held value is of type float, false otherwise. TryGetInt(out int) Attempts to retrieve a stored integer from the configurable object, if there is any. public bool TryGetInt(out int v) Parameters v int The retrieved value, or 0 if none is found. Returns bool true if the internally held value is of type int, false otherwise. TryGetNumber(out ValueType?) Attempts to retrieve a stored number from the configurable object, if there is any. public bool TryGetNumber(out ValueType? v) Parameters v ValueType The retrieved value (either an int or float), or null if none is found. Returns bool true if the internally held value is of a numeric type, false otherwise. TryGetString(out string) Attempts to retrieve a stored string from the configurable object, if there is any. public bool TryGetString(out string v) Parameters v string The retrieved value, or null if none is found. Returns bool true if the internally held value is of type string, false otherwise. Operators operator ==(ConfigValue, ConfigValue) public static bool operator ==(ConfigValue x, ConfigValue y) Parameters x ConfigValue y ConfigValue Returns bool operator !=(ConfigValue, ConfigValue) public static bool operator !=(ConfigValue x, ConfigValue y) Parameters x ConfigValue y ConfigValue Returns bool"
  },
  "api/ModLib.Options.OptionBuilder.html": {
    "href": "api/ModLib.Options.OptionBuilder.html",
    "title": "Class OptionBuilder | ModLib",
    "summary": "Class OptionBuilder Namespace ModLib.Options Assembly ModLib.dll Helper class for building OpTabs with a variety of chain-able methods. public class OptionBuilder Inheritance object OptionBuilder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks To return the generated OpTab object, use Build(). Constructors OptionBuilder(OpTab) Helper class for building OpTabs with a variety of chain-able methods. public OptionBuilder(OpTab opTab) Parameters opTab OpTab Remarks To return the generated OpTab object, use Build(). OptionBuilder(OptionInterface, string, params Color[]) Initializes a new OptionBuilder instance for creating option tabs. public OptionBuilder(OptionInterface owner, string tabName, params Color[] colors) Parameters owner OptionInterface The OptionInterface who will own the resulting OpTab instance. tabName string The name of the tab itself, displayed on the left side of the menu; Only visible with two or more tabs. colors Color[] The color values to be used by the OpTab instance. Colors are retrieved by index and applied to relevant fields in alphabetical order. Methods AddCheckBoxOption(string, Configurable<bool>, params Color[]) Adds a new OpCheckBox to the OpTab instance, with a descriptive OpLabel after it. public OptionBuilder AddCheckBoxOption(string text, Configurable<bool> configurable, params Color[] colors) Parameters text string The check box's label. Will be displayed right after the box itself. configurable Configurable<bool> The Configurable this check box will be bound to. colors Color[] The color values to be used by the OpLabel and OpCheckBox instance. Colors are retrieved by index and applied to relevant fields in alphabetical order. Returns OptionBuilder The OptionBuilder object. AddComboBoxOption(string, Configurable<string>, float, params Color[]) Adds a new OpComboBox to the OpTab instance, with a descriptive OpLabel after it. public OptionBuilder AddComboBoxOption(string text, Configurable<string> configurable, float width = 200, params Color[] colors) Parameters text string The combo box's label. Will be displayed right after the box itself. configurable Configurable<string> The Configurable this combo box will be bound to. width float The width of the combo box element. colors Color[] The color values to be used by the OpLabel and OpComboBox instance. Colors are retrieved by index and applied to relevant fields in alphabetical order. Returns OptionBuilder The OptionBuilder object. AddElements(params UIelement[]) Adds one or more Menu.Remix.MixedUI.UIelement objects to the OpTab instance. public OptionBuilder AddElements(params UIelement[] elements) Parameters elements UIelement[] The elements to be added. Returns OptionBuilder The OptionBuilder object. AddPadding(Vector2) Adds extra space before the next object added. public OptionBuilder AddPadding(Vector2 padding) Parameters padding Vector2 The amount of padding to be added. Returns OptionBuilder The OptionBuilder object. AddSliderOption(string, Configurable<int>, float, bool, params Color[]) Adds a new OpSlider to the OpTab instance, with a descriptive OpLabel before it. public OptionBuilder AddSliderOption(string text, Configurable<int> configurable, float multi = 1, bool vertical = false, params Color[] colors) Parameters text string The slider's label. Will be displayed right before the slider itself. configurable Configurable<int> The Configurable this slider will be bound to. multi float A multiplier for the slider's size. vertical bool If this slider should be vertical. colors Color[] The color values to be used by the OpLabel and OpSlider instance. Colors are retrieved by index and applied to relevant fields in alphabetical order. Returns OptionBuilder The OptionBuilder object. AddText(string, Vector2, bool, Color?) Adds a new OpLabel to the OpTab instance. public OptionBuilder AddText(string text, Vector2 size, bool bigText = false, Color? color = null) Parameters text string The text to be rendered. size Vector2 The size of the label element. bigText bool If this text should be rendered larger than usual. color Color? The color of the text. Returns OptionBuilder The OptionBuilder object. Build() Returns the generated OpTab object with the applied options of previous methods. public OpTab Build() Returns OpTab The builder's OpTab instance. GetOrigin() Retrieves the origin at which elements will be added for this OptionBuilder instance. public Vector2 GetOrigin() Returns Vector2 The position at which elements will be added for this builder instance. ResetOrigin() Resets the origin at which elements are added for this OptionBuilder instance. public OptionBuilder ResetOrigin() Returns OptionBuilder The OptionBuilder object. SetOrigin(Vector2) Sets the origin at which elements will be added for this OptionBuilder instance. public OptionBuilder SetOrigin(Vector2 origin) Parameters origin Vector2 The position to be set. Returns OptionBuilder The OptionBuilder object."
  },
  "api/ModLib.Options.OptionUtils.html": {
    "href": "api/ModLib.Options.OptionUtils.html",
    "title": "Class OptionUtils | ModLib",
    "summary": "Class OptionUtils Namespace ModLib.Options Assembly ModLib.dll Utility methods for retrieving the mod's REMIX options. public static class OptionUtils Inheritance object OptionUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This also allows for overriding the player's local options without touching their REMIX values. Properties SharedOptions The client's local ServerOptions instance, overriden when joining an online lobby. public static ServerOptions SharedOptions { get; } Property Value ServerOptions Methods GetClientOptionValue<T>(Configurable<T>?) Directly requests for the client's REMIX options, then retrieves its value. public static T? GetClientOptionValue<T>(Configurable<T>? option) Parameters option Configurable<T> The option to be queried. Returns T The configured value for the given option. Type Parameters T The type of the configurable itself. Remarks This should only be used for options which are not synced by Options.ServerOptions GetOptionValue<T>(Configurable<T>?) Determines if a given option is enabled in the client's REMIX options, or the host's if in an online lobby. public static T? GetOptionValue<T>(Configurable<T>? option) Parameters option Configurable<T> The option to be queried. Returns T The local value for the given option. Type Parameters T The type of the configurable itself. Remarks If the client is not in an online lobby, this has the same effect as directly checking the configurable itself. See Also GetClientOptionValue<T>(Configurable<T>?) GetOptionValue<T>(string) Retrieves the value of the given option from the local SharedOptions property. public static T? GetOptionValue<T>(string option) Parameters option string The name of the option to be queried. Returns T The value stored in the local SharedOptions property. Type Parameters T IsClientOptionEnabled(Configurable<bool>?) Directly requests for the client's REMIX options, then determines whether it is enabled or not. public static bool IsClientOptionEnabled(Configurable<bool>? option) Parameters option Configurable<bool> The option to be queried. Must be of bool type. Returns bool true if the given option is enabled, false otherwise. Remarks This should only be used for options which are not synced by Options.ServerOptions IsClientOptionValue<T>(Configurable<T>?, T) Directly requests for the client's REMIX options, then compares its values to the provided argument. public static bool IsClientOptionValue<T>(Configurable<T>? option, T value) Parameters option Configurable<T> The option to be queried. value T The expected value to be checked. Returns bool true if the option's value matches the given argument, false otherwise. Type Parameters T The type of the configurable itself. Remarks This should only be used for options which are not synced by Options.ServerOptions IsOptionEnabled(Configurable<bool>?) Determines if a given option is enabled in the client's REMIX options, or the host's if in an online lobby. public static bool IsOptionEnabled(Configurable<bool>? option) Parameters option Configurable<bool> The option to be queried. Must be of bool type. Returns bool The configured value for the given option. Remarks If the client is not in an online lobby, this has the same effect as directly checking the configurable itself. See Also IsClientOptionEnabled(Configurable<bool>?) IsOptionEnabled(string) Determines if the local SharedOptions property has the given option enabled. public static bool IsOptionEnabled(string option) Parameters option string The name of the option to be queried. Returns bool true if the given option is enabled, false otherwise. IsOptionValue<T>(Configurable<T>?, T) Determines if a given option has the provided value in the client's REMIX options, or the host's if in an online lobby. public static bool IsOptionValue<T>(Configurable<T>? option, T value) Parameters option Configurable<T> The option to be queried. value T The expected value to be checked. Returns bool true if the option's value matches the given argument, false otherwise. Type Parameters T The type of the configurable itself. Remarks If the client is not in an online lobby, this has the same effect as directly checking the configurable itself. See Also IsClientOptionValue<T>(Configurable<T>?, T) IsOptionValue<T>(string, T) Determines if the local SharedOptions property has the given option set to the provided value. public static bool IsOptionValue<T>(string option, T value) Parameters option string The name of the option to be queried. value T The expected value to be checked. Returns bool true if the option's value matches the given argument, false otherwise. Type Parameters T The type of the configurable itself."
  },
  "api/ModLib.Options.ServerOptions.html": {
    "href": "api/ModLib.Options.ServerOptions.html",
    "title": "Class ServerOptions | ModLib",
    "summary": "Class ServerOptions Namespace ModLib.Options Assembly ModLib.dll Holds the client's current REMIX options; Provides the ability to override these options, as well as serialize them in an online context. public class ServerOptions Inheritance object ServerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ServerOptions() Creates a new ServerOptions instance with an empty local holder. public ServerOptions() Remarks Note: Consider using SharedOptions for an automatically-managed instance of this class instead. ServerOptions(ServerOptions) Creates a new ServerOptions instance with the same held values of the existing instance. public ServerOptions(ServerOptions source) Parameters source ServerOptions The source whose values will be copied. Remarks Note: Consider using SharedOptions for an automatically-managed instance of this class instead. Properties MyOptions A read-only view of the local holder of option values. public ReadOnlyDictionary<string, ConfigValue> MyOptions { get; } Property Value ReadOnlyDictionary<string, ConfigValue> Methods AddTemporaryOption(string, ConfigValue) Adds a temporary option to this ServerOptions instance with the provided key and value. public void AddTemporaryOption(string optionKey, ConfigValue optionValue) Parameters optionKey string The unique key for identifying the temporary option. If an existing option has the same key, it is overriden. optionValue ConfigValue The value to be saved with the given option key. Remarks Temporary options are raw representations of option values; They can be used like any other option key, but are not saved to disk. IsTemporaryOption(string) Determines if a given option key is temporary or not. public bool IsTemporaryOption(string optionKey) Parameters optionKey string The option key to be searched. Returns bool true if the option is temporary, false otherwise. RefreshOptions() Sets the local holder's values to those from the REMIX option interface. public void RefreshOptions() RemoveTemporaryOption(string) Removes a given temporary option from this ServerOptions instance. public bool RemoveTemporaryOption(string optionKey) Parameters optionKey string The option key to be removed. Returns bool true if the option was successfully removed, false otherwise. This method returns false if no temporary option is found with the given key. SetOptions(ServerOptions) Sets the local holder's values to those from the given source. public void SetOptions(ServerOptions source) Parameters source ServerOptions The source whose values will be copied. SetOptions(IDictionary<string, ConfigValue>) Sets the local holder's values to those from the provided dictionary. public void SetOptions(IDictionary<string, ConfigValue> options) Parameters options IDictionary<string, ConfigValue> The dictionary whose values will be copied. ToString() Returns a string containing the ServerOptions' formatted local values. public override string ToString() Returns string A string containing the ServerOptions' formatted local values."
  },
  "api/ModLib.Options.html": {
    "href": "api/ModLib.Options.html",
    "title": "Namespace ModLib.Options | ModLib",
    "summary": "Namespace ModLib.Options Classes ClientOptionAttribute Determines a given REMIX option is not to be synced in an online context (e.g. a Rain Meadow lobby). OptionBuilder Helper class for building OpTabs with a variety of chain-able methods. OptionUtils Utility methods for retrieving the mod's REMIX options. ServerOptions Holds the client's current REMIX options; Provides the ability to override these options, as well as serialize them in an online context. Structs ConfigValue A holder of supported values for Configurable<T> options. Enums ConfigValue.ValueKind The kind of the internally held value from the configurable struct."
  },
  "api/ModLib.Registry.ModEntry.html": {
    "href": "api/ModLib.Registry.ModEntry.html",
    "title": "Class Registry.ModEntry | ModLib",
    "summary": "Class Registry.ModEntry Namespace ModLib Assembly ModLib.dll Represents a mod entry within ModLib's registry. public record Registry.ModEntry : IEquatable<Registry.ModEntry> Inheritance object Registry.ModEntry Implements IEquatable<Registry.ModEntry> Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties LogID The unique LogID of this mod, if any. public object? LogID { get; set; } Property Value object Logger The logger instance of this mod, if any. public IMyLogger? Logger { get; set; } Property Value IMyLogger OptionHolder The option holder interface of this mod, if any. public Type? OptionHolder { get; } Property Value Type Plugin The plugin metadata of this mod. public BepInPlugin Plugin { get; } Property Value BepInPlugin Methods ToString() Returns a string representing this mod's stored metadata. public override string ToString() Returns string A string representing this mod's stored metadata."
  },
  "api/ModLib.Registry.ModNotFoundException.html": {
    "href": "api/ModLib.Registry.ModNotFoundException.html",
    "title": "Class Registry.ModNotFoundException | ModLib",
    "summary": "Class Registry.ModNotFoundException Namespace ModLib Assembly ModLib.dll The exception that is thrown when a ModLib method is called from an unregistered mod assembly. public sealed class Registry.ModNotFoundException : InvalidOperationException, ISerializable, _Exception Inheritance object Exception SystemException InvalidOperationException Registry.ModNotFoundException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ModNotFoundException() Initializes a new instance of the Registry.ModNotFoundException class. public ModNotFoundException() ModNotFoundException(string) Initializes a new instance of the Registry.ModNotFoundException class with a specified error message. public ModNotFoundException(string message) Parameters message string The message that describes the error. ModNotFoundException(string, Exception) Initializes a new instance of the Registry.ModNotFoundException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ModNotFoundException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/ModLib.Registry.html": {
    "href": "api/ModLib.Registry.html",
    "title": "Class Registry | ModLib",
    "summary": "Class Registry Namespace ModLib Assembly ModLib.dll The entrypoint for registering mods to ModLib. public static class Registry Inheritance object Registry Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties DefaultLogsPath The default path for log files. public static string DefaultLogsPath { get; } Property Value string MyMod Retrieves the registered metadata of the current mod. public static Registry.ModEntry MyMod { get; } Property Value Registry.ModEntry Remarks If this property is accessed before the mod is registered to ModLib, a Registry.ModNotFoundException is thrown. Exceptions Registry.ModNotFoundException The current mod assembly was not registered to ModLib. Methods RegisterMod(BaseUnityPlugin, Type?) Registers the current mod assembly to ModLib. This should be done sometime during the mod-loading process, typically from the Main/Plugin class constructor, Awake() or OnEnable() methods. public static void RegisterMod(BaseUnityPlugin plugin, Type? optionHolder) Parameters plugin BaseUnityPlugin The Plugin class from which this mod is being registered. optionHolder Type A class with public static fields of type Configurable<T>, which are retrieved via reflection to determine the mod's REMIX options. Exceptions InvalidOperationException The current mod assembly is already registered to ModLib. RegisterMod(BaseUnityPlugin, Type?, ManualLogSource) Registers the current mod assembly to ModLib. This should be done sometime during the mod-loading process, typically from the Main/Plugin class constructor, Awake() or OnEnable() methods. public static void RegisterMod(BaseUnityPlugin plugin, Type? optionHolder, ManualLogSource logSource) Parameters plugin BaseUnityPlugin The Plugin class from which this mod is being registered. optionHolder Type A class with public static fields of type Configurable<T>, which are retrieved via reflection to determine the mod's REMIX options. logSource ManualLogSource The log source of this mod. If LogUtils is present, a LogUtils.Logger will be created with this parameter as its LogSource value. Exceptions InvalidOperationException The current mod assembly is already registered to ModLib. RegisterMod(BaseUnityPlugin, Type?, IMyLogger?) Registers the current mod assembly to ModLib. This should be done sometime during the mod-loading process, typically from the Main/Plugin class constructor, Awake() or OnEnable() methods. public static void RegisterMod(BaseUnityPlugin plugin, Type? optionHolder, IMyLogger? logger) Parameters plugin BaseUnityPlugin The Plugin class from which this mod is being registered. optionHolder Type A class with public static fields of type Configurable<T>, which are retrieved via reflection to determine the mod's REMIX options. logger IMyLogger The wrapped logger for usage by this mod. Exceptions InvalidOperationException The current mod assembly is already registered to ModLib. UnregisterMod() Removes the current mod assembly from ModLib's registry. public static bool UnregisterMod() Returns bool true if the mod was successfully unregistered, false otherwise (e.g. if it was not registered at all)."
  },
  "api/ModLib.html": {
    "href": "api/ModLib.html",
    "title": "Namespace ModLib | ModLib",
    "summary": "Namespace ModLib Classes CompatibilityManager Simple helper for determining the presence of other mods and ensure mod compatibility. Extras A collection of utilities and wrappers for common modding activities. ModPlugin A BaseUnityPlugin skeleton for quick prototyping and development. Registry The entrypoint for registering mods to ModLib. Registry.ModEntry Represents a mod entry within ModLib's registry. Registry.ModNotFoundException The exception that is thrown when a ModLib method is called from an unregistered mod assembly."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ModLib",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ModLib",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ModLib",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}