### YamlMime:ManagedReference
items:
- uid: ModLib.Collections.WeakCollection`1
  commentId: T:ModLib.Collections.WeakCollection`1
  id: WeakCollection`1
  parent: ModLib.Collections
  children:
  - ModLib.Collections.WeakCollection`1.#ctor
  - ModLib.Collections.WeakCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - ModLib.Collections.WeakCollection`1.#ctor(System.Int32)
  - ModLib.Collections.WeakCollection`1.Add(`0)
  - ModLib.Collections.WeakCollection`1.Clear
  - ModLib.Collections.WeakCollection`1.Contains(`0)
  - ModLib.Collections.WeakCollection`1.CopyTo(`0[],System.Int32)
  - ModLib.Collections.WeakCollection`1.Count
  - ModLib.Collections.WeakCollection`1.GetEnumerator
  - ModLib.Collections.WeakCollection`1.IsReadOnly
  - ModLib.Collections.WeakCollection`1.Remove(`0)
  - ModLib.Collections.WeakCollection`1.values
  langs:
  - csharp
  - vb
  name: WeakCollection<T>
  nameWithType: WeakCollection<T>
  fullName: ModLib.Collections.WeakCollection<T>
  type: Class
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: WeakCollection
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 10
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: A collection of weakly-referenced elements of a given type.
  example: []
  syntax:
    content: 'public class WeakCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : class'
    typeParameters:
    - id: T
      description: The type of this collection.
    content.vb: Public Class WeakCollection(Of T As Class) Implements ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - ModLib.Collections.WeakList`1
  implements:
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: WeakCollection(Of T)
  fullName.vb: ModLib.Collections.WeakCollection(Of T)
  name.vb: WeakCollection(Of T)
- uid: ModLib.Collections.WeakCollection`1.values
  commentId: F:ModLib.Collections.WeakCollection`1.values
  id: values
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: values
  nameWithType: WeakCollection<T>.values
  fullName: ModLib.Collections.WeakCollection<T>.values
  type: Field
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: values
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 15
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: The internal collection used for tracking <xref href="System.WeakReference%601" data-throw-if-not-resolved="false"></xref> objects.
  example: []
  syntax:
    content: protected readonly List<WeakReference<T>> values
    return:
      type: System.Collections.Generic.List{System.WeakReference{{T}}}
    content.vb: Protected ReadOnly values As List(Of WeakReference(Of T))
  nameWithType.vb: WeakCollection(Of T).values
  fullName.vb: ModLib.Collections.WeakCollection(Of T).values
- uid: ModLib.Collections.WeakCollection`1.#ctor
  commentId: M:ModLib.Collections.WeakCollection`1.#ctor
  id: '#ctor'
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: WeakCollection()
  nameWithType: WeakCollection<T>.WeakCollection()
  fullName: ModLib.Collections.WeakCollection<T>.WeakCollection()
  type: Constructor
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: .ctor
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 20
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Creates a new collection of weak references to a given type.
  example: []
  syntax:
    content: public WeakCollection()
    content.vb: Public Sub New()
  overload: ModLib.Collections.WeakCollection`1.#ctor*
  nameWithType.vb: WeakCollection(Of T).New()
  fullName.vb: ModLib.Collections.WeakCollection(Of T).New()
  name.vb: New()
- uid: ModLib.Collections.WeakCollection`1.#ctor(System.Int32)
  commentId: M:ModLib.Collections.WeakCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: WeakCollection(int)
  nameWithType: WeakCollection<T>.WeakCollection(int)
  fullName: ModLib.Collections.WeakCollection<T>.WeakCollection(int)
  type: Constructor
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: .ctor
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 29
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Creates a new collection of weak references to a given type with the provided initial capacity.
  example: []
  syntax:
    content: public WeakCollection(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: The number of elements the collection can initially store.
    content.vb: Public Sub New(capacity As Integer)
  overload: ModLib.Collections.WeakCollection`1.#ctor*
  nameWithType.vb: WeakCollection(Of T).New(Integer)
  fullName.vb: ModLib.Collections.WeakCollection(Of T).New(Integer)
  name.vb: New(Integer)
- uid: ModLib.Collections.WeakCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:ModLib.Collections.WeakCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: WeakCollection(IEnumerable<T>)
  nameWithType: WeakCollection<T>.WeakCollection(IEnumerable<T>)
  fullName: ModLib.Collections.WeakCollection<T>.WeakCollection(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: .ctor
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 38
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Creates a new collection of weak references to a given type containing elements copied from the provided collection.
  example: []
  syntax:
    content: public WeakCollection(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose values will be copied.
    content.vb: Public Sub New(collection As IEnumerable(Of T))
  overload: ModLib.Collections.WeakCollection`1.#ctor*
  nameWithType.vb: WeakCollection(Of T).New(IEnumerable(Of T))
  fullName.vb: ModLib.Collections.WeakCollection(Of T).New(System.Collections.Generic.IEnumerable(Of T))
  name.vb: New(IEnumerable(Of T))
- uid: ModLib.Collections.WeakCollection`1.Add(`0)
  commentId: M:ModLib.Collections.WeakCollection`1.Add(`0)
  id: Add(`0)
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: WeakCollection<T>.Add(T)
  fullName: ModLib.Collections.WeakCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: Add
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 51
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Adds a new weak reference to the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The object to be referenced.
    content.vb: Public Sub Add(item As T)
  overload: ModLib.Collections.WeakCollection`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: WeakCollection(Of T).Add(T)
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Add(T)
- uid: ModLib.Collections.WeakCollection`1.Clear
  commentId: M:ModLib.Collections.WeakCollection`1.Clear
  id: Clear
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: WeakCollection<T>.Clear()
  fullName: ModLib.Collections.WeakCollection<T>.Clear()
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: Clear
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 56
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Removes all items from the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: ModLib.Collections.WeakCollection`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: WeakCollection(Of T).Clear()
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Clear()
- uid: ModLib.Collections.WeakCollection`1.Count
  commentId: P:ModLib.Collections.WeakCollection`1.Count
  id: Count
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: WeakCollection<T>.Count
  fullName: ModLib.Collections.WeakCollection<T>.Count
  type: Property
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: Count
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 62
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Gets the number of weak references contained in the <xref href="System.WeakReference%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of weak references contained in the <xref href="System.WeakReference%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Count As Integer
  overload: ModLib.Collections.WeakCollection`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: WeakCollection(Of T).Count
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Count
- uid: ModLib.Collections.WeakCollection`1.IsReadOnly
  commentId: P:ModLib.Collections.WeakCollection`1.IsReadOnly
  id: IsReadOnly
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: WeakCollection<T>.IsReadOnly
  fullName: ModLib.Collections.WeakCollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsReadOnly
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 68
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Gets a value indicating whether the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref> is read-only; <code>false</code> otherwise.
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: ModLib.Collections.WeakCollection`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: WeakCollection(Of T).IsReadOnly
  fullName.vb: ModLib.Collections.WeakCollection(Of T).IsReadOnly
- uid: ModLib.Collections.WeakCollection`1.Contains(`0)
  commentId: M:ModLib.Collections.WeakCollection`1.Contains(`0)
  id: Contains(`0)
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: WeakCollection<T>.Contains(T)
  fullName: ModLib.Collections.WeakCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: Contains
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 76
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Determines whether the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref> contains a specific value.
  example: []
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
      description: <code>true</code> if <code class="paramref">item</code> is found in the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>; <code>false</code> otherwise.
    content.vb: Public Function Contains(item As T) As Boolean
  overload: ModLib.Collections.WeakCollection`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: WeakCollection(Of T).Contains(T)
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Contains(T)
- uid: ModLib.Collections.WeakCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:ModLib.Collections.WeakCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], int)
  nameWithType: WeakCollection<T>.CopyTo(T[], int)
  fullName: ModLib.Collections.WeakCollection<T>.CopyTo(T[], int)
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: CopyTo
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 93
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Copies the elements of the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref> to an Array, starting at a particular Array index.
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional Array that is the destination of the elements copied from <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>. The Array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in array at which copying begins.
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: ModLib.Collections.WeakCollection`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: WeakCollection(Of T).CopyTo(T(), Integer)
  fullName.vb: ModLib.Collections.WeakCollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
- uid: ModLib.Collections.WeakCollection`1.Remove(`0)
  commentId: M:ModLib.Collections.WeakCollection`1.Remove(`0)
  id: Remove(`0)
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: WeakCollection<T>.Remove(T)
  fullName: ModLib.Collections.WeakCollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: Remove
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 109
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Removes the first occurrence of a specific object from the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The object to remove from the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        true if item was successfully removed from the <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>; otherwise, false.

        This method also returns false if item is not found in the original <xref href="ModLib.Collections.WeakCollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Remove(item As T) As Boolean
  overload: ModLib.Collections.WeakCollection`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: WeakCollection(Of T).Remove(T)
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Remove(T)
- uid: ModLib.Collections.WeakCollection`1.GetEnumerator
  commentId: M:ModLib.Collections.WeakCollection`1.GetEnumerator
  id: GetEnumerator
  parent: ModLib.Collections.WeakCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: WeakCollection<T>.GetEnumerator()
  fullName: ModLib.Collections.WeakCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: ModLib/Collections/WeakCollection.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: GetEnumerator
    path: ../ModLib/Collections/WeakCollection.cs
    startLine: 122
  assemblies:
  - ModLib
  namespace: ModLib.Collections
  summary: Returns an enumerator that iterates through the collection.
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator that can be used to iterate through the collection.
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: ModLib.Collections.WeakCollection`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: WeakCollection(Of T).GetEnumerator()
  fullName.vb: ModLib.Collections.WeakCollection(Of T).GetEnumerator()
references:
- uid: ModLib.Collections
  commentId: N:ModLib.Collections
  href: ModLib.html
  name: ModLib.Collections
  nameWithType: ModLib.Collections
  fullName: ModLib.Collections
  spec.csharp:
  - uid: ModLib
    name: ModLib
    href: ModLib.html
  - name: .
  - uid: ModLib.Collections
    name: Collections
    href: ModLib.Collections.html
  spec.vb:
  - uid: ModLib
    name: ModLib
    href: ModLib.html
  - name: .
  - uid: ModLib.Collections
    name: Collections
    href: ModLib.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: System.WeakReference`1
  commentId: T:System.WeakReference`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.weakreference-1
  name: WeakReference<T>
  nameWithType: WeakReference<T>
  fullName: System.WeakReference<T>
  nameWithType.vb: WeakReference(Of T)
  fullName.vb: System.WeakReference(Of T)
  name.vb: WeakReference(Of T)
  spec.csharp:
  - uid: System.WeakReference`1
    name: WeakReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.weakreference-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.WeakReference`1
    name: WeakReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.weakreference-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List{System.WeakReference{{T}}}
  commentId: T:System.Collections.Generic.List{System.WeakReference{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<WeakReference<T>>
  nameWithType: List<WeakReference<T>>
  fullName: System.Collections.Generic.List<System.WeakReference<T>>
  nameWithType.vb: List(Of WeakReference(Of T))
  fullName.vb: System.Collections.Generic.List(Of System.WeakReference(Of T))
  name.vb: List(Of WeakReference(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.WeakReference`1
    name: WeakReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.weakreference-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.WeakReference`1
    name: WeakReference
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.weakreference-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ModLib.Collections.WeakCollection`1.#ctor*
  commentId: Overload:ModLib.Collections.WeakCollection`1.#ctor
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1__ctor
  name: WeakCollection
  nameWithType: WeakCollection<T>.WeakCollection
  fullName: ModLib.Collections.WeakCollection<T>.WeakCollection
  nameWithType.vb: WeakCollection(Of T).New
  fullName.vb: ModLib.Collections.WeakCollection(Of T).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: ModLib.Collections.WeakCollection`1
  commentId: T:ModLib.Collections.WeakCollection`1
  href: ModLib.Collections.WeakCollection-1.html
  name: WeakCollection<T>
  nameWithType: WeakCollection<T>
  fullName: ModLib.Collections.WeakCollection<T>
  nameWithType.vb: WeakCollection(Of T)
  fullName.vb: ModLib.Collections.WeakCollection(Of T)
  name.vb: WeakCollection(Of T)
  spec.csharp:
  - uid: ModLib.Collections.WeakCollection`1
    name: WeakCollection
    href: ModLib.Collections.WeakCollection-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ModLib.Collections.WeakCollection`1
    name: WeakCollection
    href: ModLib.Collections.WeakCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ModLib.Collections.WeakCollection`1.Add*
  commentId: Overload:ModLib.Collections.WeakCollection`1.Add
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_Add__0_
  name: Add
  nameWithType: WeakCollection<T>.Add
  fullName: ModLib.Collections.WeakCollection<T>.Add
  nameWithType.vb: WeakCollection(Of T).Add
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: ModLib.Collections.WeakCollection`1.Clear*
  commentId: Overload:ModLib.Collections.WeakCollection`1.Clear
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_Clear
  name: Clear
  nameWithType: WeakCollection<T>.Clear
  fullName: ModLib.Collections.WeakCollection<T>.Clear
  nameWithType.vb: WeakCollection(Of T).Clear
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: ModLib.Collections.WeakCollection`1.Count*
  commentId: Overload:ModLib.Collections.WeakCollection`1.Count
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_Count
  name: Count
  nameWithType: WeakCollection<T>.Count
  fullName: ModLib.Collections.WeakCollection<T>.Count
  nameWithType.vb: WeakCollection(Of T).Count
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: ModLib.Collections.WeakCollection`1.IsReadOnly*
  commentId: Overload:ModLib.Collections.WeakCollection`1.IsReadOnly
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_IsReadOnly
  name: IsReadOnly
  nameWithType: WeakCollection<T>.IsReadOnly
  fullName: ModLib.Collections.WeakCollection<T>.IsReadOnly
  nameWithType.vb: WeakCollection(Of T).IsReadOnly
  fullName.vb: ModLib.Collections.WeakCollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: ModLib.Collections.WeakCollection`1.Contains*
  commentId: Overload:ModLib.Collections.WeakCollection`1.Contains
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_Contains__0_
  name: Contains
  nameWithType: WeakCollection<T>.Contains
  fullName: ModLib.Collections.WeakCollection<T>.Contains
  nameWithType.vb: WeakCollection(Of T).Contains
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: ModLib.Collections.WeakCollection`1.CopyTo*
  commentId: Overload:ModLib.Collections.WeakCollection`1.CopyTo
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_CopyTo__0___System_Int32_
  name: CopyTo
  nameWithType: WeakCollection<T>.CopyTo
  fullName: ModLib.Collections.WeakCollection<T>.CopyTo
  nameWithType.vb: WeakCollection(Of T).CopyTo
  fullName.vb: ModLib.Collections.WeakCollection(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ModLib.Collections.WeakCollection`1.Remove*
  commentId: Overload:ModLib.Collections.WeakCollection`1.Remove
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_Remove__0_
  name: Remove
  nameWithType: WeakCollection<T>.Remove
  fullName: ModLib.Collections.WeakCollection<T>.Remove
  nameWithType.vb: WeakCollection(Of T).Remove
  fullName.vb: ModLib.Collections.WeakCollection(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: ModLib.Collections.WeakCollection`1.GetEnumerator*
  commentId: Overload:ModLib.Collections.WeakCollection`1.GetEnumerator
  href: ModLib.Collections.WeakCollection-1.html#ModLib_Collections_WeakCollection_1_GetEnumerator
  name: GetEnumerator
  nameWithType: WeakCollection<T>.GetEnumerator
  fullName: ModLib.Collections.WeakCollection<T>.GetEnumerator
  nameWithType.vb: WeakCollection(Of T).GetEnumerator
  fullName.vb: ModLib.Collections.WeakCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
