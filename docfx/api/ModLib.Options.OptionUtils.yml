### YamlMime:ManagedReference
items:
- uid: ModLib.Options.OptionUtils
  commentId: T:ModLib.Options.OptionUtils
  id: OptionUtils
  parent: ModLib.Options
  children:
  - ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  - ModLib.Options.OptionUtils.GetOptionValue``1(Configurable{``0})
  - ModLib.Options.OptionUtils.GetOptionValue``1(System.String)
  - ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  - ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  - ModLib.Options.OptionUtils.IsOptionEnabled(Configurable{System.Boolean})
  - ModLib.Options.OptionUtils.IsOptionEnabled(System.String)
  - ModLib.Options.OptionUtils.IsOptionValue``1(Configurable{``0},``0)
  - ModLib.Options.OptionUtils.IsOptionValue``1(System.String,``0)
  - ModLib.Options.OptionUtils.SharedOptions
  langs:
  - csharp
  - vb
  name: OptionUtils
  nameWithType: OptionUtils
  fullName: ModLib.Options.OptionUtils
  type: Class
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: OptionUtils
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 8
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Utility methods for retrieving the mod's REMIX options.
  remarks: This also allows for overriding the player's local options without touching their REMIX values.
  example: []
  syntax:
    content: public static class OptionUtils
    content.vb: Public Module OptionUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: ModLib.Options.OptionUtils.SharedOptions
  commentId: P:ModLib.Options.OptionUtils.SharedOptions
  id: SharedOptions
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: SharedOptions
  nameWithType: OptionUtils.SharedOptions
  fullName: ModLib.Options.OptionUtils.SharedOptions
  type: Property
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: SharedOptions
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 13
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: The client's local <xref href="ModLib.Options.ServerOptions" data-throw-if-not-resolved="false"></xref> instance, overriden when joining an online lobby.
  example: []
  syntax:
    content: public static ServerOptions SharedOptions { get; }
    parameters: []
    return:
      type: ModLib.Options.ServerOptions
    content.vb: Public Shared ReadOnly Property SharedOptions As ServerOptions
  overload: ModLib.Options.OptionUtils.SharedOptions*
- uid: ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  commentId: M:ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  id: GetClientOptionValue``1(Configurable{``0})
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: GetClientOptionValue<T>(Configurable<T>?)
  nameWithType: OptionUtils.GetClientOptionValue<T>(Configurable<T>?)
  fullName: ModLib.Options.OptionUtils.GetClientOptionValue<T>(Configurable<T>?)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: GetClientOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 24
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Directly requests for the client's REMIX options, then retrieves its value.
  remarks: This should only be used for options which are not synced by <code>Options.ServerOptions</code>
  example: []
  syntax:
    content: public static T? GetClientOptionValue<T>(Configurable<T>? option)
    parameters:
    - id: option
      type: Configurable{{T}}
      description: The option to be queried.
    typeParameters:
    - id: T
      description: The type of the configurable itself.
    return:
      type: '{T}'
      description: The configured value for the given option.
    content.vb: Public Shared Function GetClientOptionValue(Of T)([option] As Configurable(Of T)) As T
  overload: ModLib.Options.OptionUtils.GetClientOptionValue*
  nameWithType.vb: OptionUtils.GetClientOptionValue(Of T)(Configurable(Of T))
  fullName.vb: ModLib.Options.OptionUtils.GetClientOptionValue(Of T)(Configurable(Of T))
  name.vb: GetClientOptionValue(Of T)(Configurable(Of T))
- uid: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  commentId: M:ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  id: IsClientOptionEnabled(Configurable{System.Boolean})
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsClientOptionEnabled(Configurable<bool>?)
  nameWithType: OptionUtils.IsClientOptionEnabled(Configurable<bool>?)
  fullName: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable<bool>?)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsClientOptionEnabled
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 35
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Directly requests for the client's REMIX options, then determines whether it is enabled or not.
  remarks: This should only be used for options which are not synced by <code>Options.ServerOptions</code>
  example: []
  syntax:
    content: public static bool IsClientOptionEnabled(Configurable<bool>? option)
    parameters:
    - id: option
      type: Configurable{System.Boolean}
      description: The option to be queried. Must be of <code>bool</code> type.
    return:
      type: System.Boolean
      description: <code>true</code> if the given option is enabled, <code>false</code> otherwise.
    content.vb: Public Shared Function IsClientOptionEnabled([option] As Configurable(Of Boolean)) As Boolean
  overload: ModLib.Options.OptionUtils.IsClientOptionEnabled*
  nameWithType.vb: OptionUtils.IsClientOptionEnabled(Configurable(Of Boolean))
  fullName.vb: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable(Of Boolean))
  name.vb: IsClientOptionEnabled(Configurable(Of Boolean))
- uid: ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  commentId: M:ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  id: IsClientOptionValue``1(Configurable{``0},``0)
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsClientOptionValue<T>(Configurable<T>?, T)
  nameWithType: OptionUtils.IsClientOptionValue<T>(Configurable<T>?, T)
  fullName: ModLib.Options.OptionUtils.IsClientOptionValue<T>(Configurable<T>?, T)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsClientOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 48
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Directly requests for the client's REMIX options, then compares its values to the provided argument.
  remarks: This should only be used for options which are not synced by <code>Options.ServerOptions</code>
  example: []
  syntax:
    content: public static bool IsClientOptionValue<T>(Configurable<T>? option, T value)
    parameters:
    - id: option
      type: Configurable{{T}}
      description: The option to be queried.
    - id: value
      type: '{T}'
      description: The expected value to be checked.
    typeParameters:
    - id: T
      description: The type of the configurable itself.
    return:
      type: System.Boolean
      description: <code>true</code> if the option's value matches the given argument, <code>false</code> otherwise.
    content.vb: Public Shared Function IsClientOptionValue(Of T)([option] As Configurable(Of T), value As T) As Boolean
  overload: ModLib.Options.OptionUtils.IsClientOptionValue*
  nameWithType.vb: OptionUtils.IsClientOptionValue(Of T)(Configurable(Of T), T)
  fullName.vb: ModLib.Options.OptionUtils.IsClientOptionValue(Of T)(Configurable(Of T), T)
  name.vb: IsClientOptionValue(Of T)(Configurable(Of T), T)
- uid: ModLib.Options.OptionUtils.GetOptionValue``1(Configurable{``0})
  commentId: M:ModLib.Options.OptionUtils.GetOptionValue``1(Configurable{``0})
  id: GetOptionValue``1(Configurable{``0})
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: GetOptionValue<T>(Configurable<T>?)
  nameWithType: OptionUtils.GetOptionValue<T>(Configurable<T>?)
  fullName: ModLib.Options.OptionUtils.GetOptionValue<T>(Configurable<T>?)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: GetOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 61
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Determines if a given option is enabled in the client's REMIX options, or the host's if in an online lobby.
  remarks: If the client is not in an online lobby, this has the same effect as directly checking the configurable itself.
  example: []
  syntax:
    content: public static T? GetOptionValue<T>(Configurable<T>? option)
    parameters:
    - id: option
      type: Configurable{{T}}
      description: The option to be queried.
    typeParameters:
    - id: T
      description: The type of the configurable itself.
    return:
      type: '{T}'
      description: The local value for the given option.
    content.vb: Public Shared Function GetOptionValue(Of T)([option] As Configurable(Of T)) As T
  overload: ModLib.Options.OptionUtils.GetOptionValue*
  seealso:
  - linkId: ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
    commentId: M:ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  nameWithType.vb: OptionUtils.GetOptionValue(Of T)(Configurable(Of T))
  fullName.vb: ModLib.Options.OptionUtils.GetOptionValue(Of T)(Configurable(Of T))
  name.vb: GetOptionValue(Of T)(Configurable(Of T))
- uid: ModLib.Options.OptionUtils.IsOptionEnabled(Configurable{System.Boolean})
  commentId: M:ModLib.Options.OptionUtils.IsOptionEnabled(Configurable{System.Boolean})
  id: IsOptionEnabled(Configurable{System.Boolean})
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsOptionEnabled(Configurable<bool>?)
  nameWithType: OptionUtils.IsOptionEnabled(Configurable<bool>?)
  fullName: ModLib.Options.OptionUtils.IsOptionEnabled(Configurable<bool>?)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsOptionEnabled
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 73
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Determines if a given option is enabled in the client's REMIX options, or the host's if in an online lobby.
  remarks: If the client is not in an online lobby, this has the same effect as directly checking the configurable itself.
  example: []
  syntax:
    content: public static bool IsOptionEnabled(Configurable<bool>? option)
    parameters:
    - id: option
      type: Configurable{System.Boolean}
      description: The option to be queried. Must be of <code>bool</code> type.
    return:
      type: System.Boolean
      description: The configured value for the given option.
    content.vb: Public Shared Function IsOptionEnabled([option] As Configurable(Of Boolean)) As Boolean
  overload: ModLib.Options.OptionUtils.IsOptionEnabled*
  seealso:
  - linkId: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
    commentId: M:ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  nameWithType.vb: OptionUtils.IsOptionEnabled(Configurable(Of Boolean))
  fullName.vb: ModLib.Options.OptionUtils.IsOptionEnabled(Configurable(Of Boolean))
  name.vb: IsOptionEnabled(Configurable(Of Boolean))
- uid: ModLib.Options.OptionUtils.IsOptionValue``1(Configurable{``0},``0)
  commentId: M:ModLib.Options.OptionUtils.IsOptionValue``1(Configurable{``0},``0)
  id: IsOptionValue``1(Configurable{``0},``0)
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsOptionValue<T>(Configurable<T>?, T)
  nameWithType: OptionUtils.IsOptionValue<T>(Configurable<T>?, T)
  fullName: ModLib.Options.OptionUtils.IsOptionValue<T>(Configurable<T>?, T)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 87
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Determines if a given option has the provided value in the client's REMIX options, or the host's if in an online lobby.
  remarks: If the client is not in an online lobby, this has the same effect as directly checking the configurable itself.
  example: []
  syntax:
    content: public static bool IsOptionValue<T>(Configurable<T>? option, T value)
    parameters:
    - id: option
      type: Configurable{{T}}
      description: The option to be queried.
    - id: value
      type: '{T}'
      description: The expected value to be checked.
    typeParameters:
    - id: T
      description: The type of the configurable itself.
    return:
      type: System.Boolean
      description: <code>true</code> if the option's value matches the given argument, <code>false</code> otherwise.
    content.vb: Public Shared Function IsOptionValue(Of T)([option] As Configurable(Of T), value As T) As Boolean
  overload: ModLib.Options.OptionUtils.IsOptionValue*
  seealso:
  - linkId: ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
    commentId: M:ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  nameWithType.vb: OptionUtils.IsOptionValue(Of T)(Configurable(Of T), T)
  fullName.vb: ModLib.Options.OptionUtils.IsOptionValue(Of T)(Configurable(Of T), T)
  name.vb: IsOptionValue(Of T)(Configurable(Of T), T)
- uid: ModLib.Options.OptionUtils.GetOptionValue``1(System.String)
  commentId: M:ModLib.Options.OptionUtils.GetOptionValue``1(System.String)
  id: GetOptionValue``1(System.String)
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: GetOptionValue<T>(string)
  nameWithType: OptionUtils.GetOptionValue<T>(string)
  fullName: ModLib.Options.OptionUtils.GetOptionValue<T>(string)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: GetOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 95
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Retrieves the value of the given option from the local <code>SharedOptions</code> property.
  example: []
  syntax:
    content: public static T? GetOptionValue<T>(string option)
    parameters:
    - id: option
      type: System.String
      description: The name of the option to be queried.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The value stored in the local <code>SharedOptions</code> property.
    content.vb: Public Shared Function GetOptionValue(Of T)([option] As String) As T
  overload: ModLib.Options.OptionUtils.GetOptionValue*
  nameWithType.vb: OptionUtils.GetOptionValue(Of T)(String)
  fullName.vb: ModLib.Options.OptionUtils.GetOptionValue(Of T)(String)
  name.vb: GetOptionValue(Of T)(String)
- uid: ModLib.Options.OptionUtils.IsOptionEnabled(System.String)
  commentId: M:ModLib.Options.OptionUtils.IsOptionEnabled(System.String)
  id: IsOptionEnabled(System.String)
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsOptionEnabled(string)
  nameWithType: OptionUtils.IsOptionEnabled(string)
  fullName: ModLib.Options.OptionUtils.IsOptionEnabled(string)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsOptionEnabled
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 104
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Determines if the local <code>SharedOptions</code> property has the given option enabled.
  example: []
  syntax:
    content: public static bool IsOptionEnabled(string option)
    parameters:
    - id: option
      type: System.String
      description: The name of the option to be queried.
    return:
      type: System.Boolean
      description: <code>true</code> if the given option is enabled, <code>false</code> otherwise.
    content.vb: Public Shared Function IsOptionEnabled([option] As String) As Boolean
  overload: ModLib.Options.OptionUtils.IsOptionEnabled*
  nameWithType.vb: OptionUtils.IsOptionEnabled(String)
  fullName.vb: ModLib.Options.OptionUtils.IsOptionEnabled(String)
  name.vb: IsOptionEnabled(String)
- uid: ModLib.Options.OptionUtils.IsOptionValue``1(System.String,``0)
  commentId: M:ModLib.Options.OptionUtils.IsOptionValue``1(System.String,``0)
  id: IsOptionValue``1(System.String,``0)
  parent: ModLib.Options.OptionUtils
  langs:
  - csharp
  - vb
  name: IsOptionValue<T>(string, T)
  nameWithType: OptionUtils.IsOptionValue<T>(string, T)
  fullName: ModLib.Options.OptionUtils.IsOptionValue<T>(string, T)
  type: Method
  source:
    remote:
      path: ModLib/Options/OptionUtils.cs
      branch: devel
      repo: https://github.com/AydenTFoxx/ModLib.git
    id: IsOptionValue
    path: ../ModLib/Options/OptionUtils.cs
    startLine: 114
  assemblies:
  - ModLib
  namespace: ModLib.Options
  summary: Determines if the local <code>SharedOptions</code> property has the given option set to the provided value.
  example: []
  syntax:
    content: public static bool IsOptionValue<T>(string option, T value)
    parameters:
    - id: option
      type: System.String
      description: The name of the option to be queried.
    - id: value
      type: '{T}'
      description: The expected value to be checked.
    typeParameters:
    - id: T
      description: The type of the configurable itself.
    return:
      type: System.Boolean
      description: <code>true</code> if the option's value matches the given argument, <code>false</code> otherwise.
    content.vb: Public Shared Function IsOptionValue(Of T)([option] As String, value As T) As Boolean
  overload: ModLib.Options.OptionUtils.IsOptionValue*
  nameWithType.vb: OptionUtils.IsOptionValue(Of T)(String, T)
  fullName.vb: ModLib.Options.OptionUtils.IsOptionValue(Of T)(String, T)
  name.vb: IsOptionValue(Of T)(String, T)
references:
- uid: ModLib.Options
  commentId: N:ModLib.Options
  href: ModLib.html
  name: ModLib.Options
  nameWithType: ModLib.Options
  fullName: ModLib.Options
  spec.csharp:
  - uid: ModLib
    name: ModLib
    href: ModLib.html
  - name: .
  - uid: ModLib.Options
    name: Options
    href: ModLib.Options.html
  spec.vb:
  - uid: ModLib
    name: ModLib
    href: ModLib.html
  - name: .
  - uid: ModLib.Options
    name: Options
    href: ModLib.Options.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ModLib.Options.ServerOptions
  commentId: T:ModLib.Options.ServerOptions
  parent: ModLib.Options
  href: ModLib.Options.ServerOptions.html
  name: ServerOptions
  nameWithType: ServerOptions
  fullName: ModLib.Options.ServerOptions
- uid: ModLib.Options.OptionUtils.SharedOptions*
  commentId: Overload:ModLib.Options.OptionUtils.SharedOptions
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_SharedOptions
  name: SharedOptions
  nameWithType: OptionUtils.SharedOptions
  fullName: ModLib.Options.OptionUtils.SharedOptions
- uid: ModLib.Options.OptionUtils.GetClientOptionValue*
  commentId: Overload:ModLib.Options.OptionUtils.GetClientOptionValue
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_GetClientOptionValue__1_Configurable___0__
  name: GetClientOptionValue
  nameWithType: OptionUtils.GetClientOptionValue
  fullName: ModLib.Options.OptionUtils.GetClientOptionValue
- uid: Configurable{{T}}
  commentId: T:Configurable{``0}
  definition: Configurable`1
  name: Configurable<T>
  nameWithType: Configurable<T>
  fullName: Configurable<T>
  nameWithType.vb: Configurable(Of T)
  fullName.vb: Configurable(Of T)
  name.vb: Configurable(Of T)
  spec.csharp:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Configurable`1
  commentId: T:Configurable`1
  isExternal: true
  name: Configurable<T>
  nameWithType: Configurable<T>
  fullName: Configurable<T>
  nameWithType.vb: Configurable(Of T)
  fullName.vb: Configurable(Of T)
  name.vb: Configurable(Of T)
  spec.csharp:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: ModLib.Options.OptionUtils.IsClientOptionEnabled*
  commentId: Overload:ModLib.Options.OptionUtils.IsClientOptionEnabled
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionEnabled_Configurable_System_Boolean__
  name: IsClientOptionEnabled
  nameWithType: OptionUtils.IsClientOptionEnabled
  fullName: ModLib.Options.OptionUtils.IsClientOptionEnabled
- uid: Configurable{System.Boolean}
  commentId: T:Configurable{System.Boolean}
  definition: Configurable`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Configurable<bool>
  nameWithType: Configurable<bool>
  fullName: Configurable<bool>
  nameWithType.vb: Configurable(Of Boolean)
  fullName.vb: Configurable(Of Boolean)
  name.vb: Configurable(Of Boolean)
  spec.csharp:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: ModLib.Options.OptionUtils.IsClientOptionValue*
  commentId: Overload:ModLib.Options.OptionUtils.IsClientOptionValue
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionValue__1_Configurable___0____0_
  name: IsClientOptionValue
  nameWithType: OptionUtils.IsClientOptionValue
  fullName: ModLib.Options.OptionUtils.IsClientOptionValue
- uid: ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  commentId: M:ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
  isExternal: true
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_GetClientOptionValue__1_Configurable___0__
  name: GetClientOptionValue<T>(Configurable<T>)
  nameWithType: OptionUtils.GetClientOptionValue<T>(Configurable<T>)
  fullName: ModLib.Options.OptionUtils.GetClientOptionValue<T>(Configurable<T>)
  nameWithType.vb: OptionUtils.GetClientOptionValue(Of T)(Configurable(Of T))
  fullName.vb: ModLib.Options.OptionUtils.GetClientOptionValue(Of T)(Configurable(Of T))
  name.vb: GetClientOptionValue(Of T)(Configurable(Of T))
  spec.csharp:
  - uid: ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
    name: GetClientOptionValue
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_GetClientOptionValue__1_Configurable___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: ModLib.Options.OptionUtils.GetClientOptionValue``1(Configurable{``0})
    name: GetClientOptionValue
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_GetClientOptionValue__1_Configurable___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: ModLib.Options.OptionUtils.GetOptionValue*
  commentId: Overload:ModLib.Options.OptionUtils.GetOptionValue
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_GetOptionValue__1_Configurable___0__
  name: GetOptionValue
  nameWithType: OptionUtils.GetOptionValue
  fullName: ModLib.Options.OptionUtils.GetOptionValue
- uid: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  commentId: M:ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
  isExternal: true
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionEnabled_Configurable_System_Boolean__
  name: IsClientOptionEnabled(Configurable<bool>)
  nameWithType: OptionUtils.IsClientOptionEnabled(Configurable<bool>)
  fullName: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable<bool>)
  nameWithType.vb: OptionUtils.IsClientOptionEnabled(Configurable(Of Boolean))
  fullName.vb: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable(Of Boolean))
  name.vb: IsClientOptionEnabled(Configurable(Of Boolean))
  spec.csharp:
  - uid: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
    name: IsClientOptionEnabled
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionEnabled_Configurable_System_Boolean__
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: ModLib.Options.OptionUtils.IsClientOptionEnabled(Configurable{System.Boolean})
    name: IsClientOptionEnabled
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionEnabled_Configurable_System_Boolean__
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: ModLib.Options.OptionUtils.IsOptionEnabled*
  commentId: Overload:ModLib.Options.OptionUtils.IsOptionEnabled
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsOptionEnabled_Configurable_System_Boolean__
  name: IsOptionEnabled
  nameWithType: OptionUtils.IsOptionEnabled
  fullName: ModLib.Options.OptionUtils.IsOptionEnabled
- uid: ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  commentId: M:ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
  isExternal: true
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionValue__1_Configurable___0____0_
  name: IsClientOptionValue<T>(Configurable<T>, T)
  nameWithType: OptionUtils.IsClientOptionValue<T>(Configurable<T>, T)
  fullName: ModLib.Options.OptionUtils.IsClientOptionValue<T>(Configurable<T>, T)
  nameWithType.vb: OptionUtils.IsClientOptionValue(Of T)(Configurable(Of T), T)
  fullName.vb: ModLib.Options.OptionUtils.IsClientOptionValue(Of T)(Configurable(Of T), T)
  name.vb: IsClientOptionValue(Of T)(Configurable(Of T), T)
  spec.csharp:
  - uid: ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
    name: IsClientOptionValue
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionValue__1_Configurable___0____0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: ModLib.Options.OptionUtils.IsClientOptionValue``1(Configurable{``0},``0)
    name: IsClientOptionValue
    href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsClientOptionValue__1_Configurable___0____0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: Configurable`1
    name: Configurable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: ModLib.Options.OptionUtils.IsOptionValue*
  commentId: Overload:ModLib.Options.OptionUtils.IsOptionValue
  href: ModLib.Options.OptionUtils.html#ModLib_Options_OptionUtils_IsOptionValue__1_Configurable___0____0_
  name: IsOptionValue
  nameWithType: OptionUtils.IsOptionValue
  fullName: ModLib.Options.OptionUtils.IsOptionValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
